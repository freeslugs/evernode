{
  "name": "mailjet",
  "description": "Mailjet web API",
  "version": "0.0.1",
  "homepage": "https://github.com/panosru/node-mailjet",
  "repository": {
    "type": "git",
    "url": "git://github.com/panosru/node-mailjet.git"
  },
  "author": {
    "name": "Panagiotis Kosmidis",
    "email": "panosru@me.com",
    "url": "http://panosru.com/"
  },
  "keywords": [
    "mailjet",
    "smtp server",
    "bulk email",
    "marketing email"
  ],
  "main": "./index.js",
  "dependencies": {},
  "devDependencies": {
    "jshint": "= 0.7.1",
    "chai": "= 1.1.0",
    "vows": "= 0.6.3"
  },
  "scripts": {
    "test": "make"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/panosru/node-mailjet/raw/master/LICENSE"
    }
  ],
  "readme": "Mailjet is a real-time Cloud Emailing platform: scalable, agile and flexible!\n=======\n\nMailjet unique algorithm boosts your deliverability and the platform provides in-depth insight so you can optimize more than ever.\n\nMore info on [Mailjet.com](https://www.mailjet.com/)\n\nMailjet Web API\n=======\n\nInfo on the API can be found [here](https://www.mailjet.com/docs/api)\n\nInstall\n=======\nTo install maljet run `npm install mailjet`\n\nUsage\n=======\n\nIn order to use mailjet you need to require it and instantiate it first:\n\n```js\nvar Mailjet = require('mailjet');\n\nvar instance = new Mailjet('APIKEY', 'SECRETKEY', {\n  secure : true, // When true uses https when false it uses http, default is true\n  output : 'json' // The output type you prefer, default is json, you can choose between php, json, xml, serialize, html, csv\n});\n```\n\nThe options object can be skiped so you can simply get an instance like this: `var instance = new Mailjet('APIKEY', 'SECRETKEY');` of course you replace *APIKEY* with your API key and *SECRETKEY* with your Secret key\nTo call a method from API you use `sendRequest` method. This method gets 4 optional parameters:\n\n1. `method` *(String) / Required*: Is the method you need to call.\n2. `params` *(Object) / Optional*: The params you want to send.\n3. `request` *(String) / Optional*: The type of request you want to make, it's either `GET` or `POST`, by default is `GET`.\n4. `cb` *(Function) / Optional*: This is the callback method that will be triggered when the API request is done. Callback returns 4 params as well:\n    1. `err`: Error object in case of failure\n    2. `status`: The request status code\n    3. `data`: The returned data object *(WARNING: In case of API error (like internal errors) this may also be html instead of object)*\n    4. `headers`: The returned headers\n    \n\n## Examples\n\n### Usage with 3 params and a callback\n\n```js\ninstance.sendRequest('userinfos', {}, 'GET', function (err, status, data, headers) {\n  console.log('Error: ' + err);\n  console.log('Status: ' + status);\n  console.log('Data: '); console.log(data);\n  console.log('Headers: '); console.log(headers);\n});\n```\n\nIn this example all the params are used.\n\n### Usage with 2 params and a callback\n    \n```js\ninstance.sendRequest('userinfos', {}, function (err, status, data, headers) {\n  console.log('Error: ' + err);\n  console.log('Status: ' + status);\n  console.log('Data: '); console.log(data);\n  console.log('Headers: '); console.log(headers);\n});\n```\n\nIn this example the `request` param is omited.\n\n### Usage with 1 param and a callback\n\n```js\ninstance.sendRequest('userinfos', function (err, status, data, headers) {\n  console.log('Error: ' + err);\n  console.log('Status: ' + status);\n  console.log('Data: '); console.log(data);\n  console.log('Headers: '); console.log(headers);\n});\n```\n\nIn this example the `params` and `request` params are omited as we don't need them.\n\n### Usage without a callback function\n\nIn case callback function is not provided then a promise is returned.\n\n```js\nvar promise = instance.sendRequest('userinfos');\n\npromise.once('complete', function (result) {\n  if (result.status) {\n    console.log(result);\n  } else {\n    // Handle error\n  }\n});\n```\n\n`result` in case of failure is an error object, otherwise it's an object with `status`, `data` and `headers` properties which are same as in callback method.\n\n\nDeps, Tests & Lint\n=======\n\nSimply run `make` in mailjet root directory.\n\n```\n# make\n\n* Project Tasks\nmake deps             Install Dependencies\nmake deps-clean       Removes the node_modules directory\nmake lint             Run Code Analysis tool (scans entire project)\n\n* Test Suites\nmake tests            Run All tests\nmake test-basic       Run Basic tests (module specific tests)\nmake test-api         Run API Methods tests (test fixtures required)\nmake test-user        Run User Methods tests (test fixtures required)\nmake test-contact     Run Contact Methods tests (test fixtures required)\nmake test-lists       Run Lists Methods tests (test fixtures required)\nmake test-message     Run Message Methods tests (test fixtures required)\nmake test-report      Run Report Methods tests (test fixtures required)\nmake test-cleanup     Run Cleanup Methods tests (test fixtures required)\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/panosru/node-mailjet/issues"
  },
  "_id": "mailjet@0.0.1",
  "_from": "mailjet@0.0.1"
}
